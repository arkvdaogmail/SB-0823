<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Supabase File Management</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            max-width: 1000px;
            margin: 0 auto;
            line-height: 1.5;
        }
        .section {
            background-color: #f5f5f5;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        #filePreviewModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        #filePreviewContent {
            background-color: white;
            max-width: 80%;
            max-height: 80%;
            overflow: auto;
            padding: 20px;
            border-radius: 10px;
            position: relative;
        }
        #closePreview {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 24px;
            color: red;
        }
        .preview-image {
            max-width: 100%;
            max-height: 500px;
            object-fit: contain;
        }
        .preview-text {
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            max-height: 500px;
            overflow: auto;
        }
        /* Rest of the previous styles remain the same */
    </style>
</head>
<body>
    <!-- Previous HTML content remains the same -->

    <!-- File Preview Modal -->
    <div id="filePreviewModal">
        <div id="filePreviewContent">
            <span id="closePreview">&times;</span>
            <div id="previewContainer"></div>
        </div>
    </div>

    <script>
        // ... (previous JavaScript remains the same)

        // File Preview Function
        async function previewFile(filePath, fileName) {
            const filePreviewModal = document.getElementById('filePreviewModal');
            const previewContainer = document.getElementById('previewContainer');
            
            try {
                // Get signed URL for the file
                const { data, error } = await supabaseClient.storage
                    .from('documents')
                    .createSignedUrl(filePath, 60); // URL valid for 60 seconds
                
                if (error) throw error;

                // Reset previous preview
                previewContainer.innerHTML = '';

                // Determine file type
                const fileExtension = fileName.split('.').pop().toLowerCase();
                const signedUrl = data.signedUrl;

                // Preview based on file type
                switch(fileExtension) {
                    case 'jpg':
                    case 'jpeg':
                    case 'png':
                    case 'gif':
                    case 'bmp':
                    case 'webp':
                        // Image preview
                        const img = document.createElement('img');
                        img.src = signedUrl;
                        img.classList.add('preview-image');
                        img.alt = fileName;
                        previewContainer.appendChild(img);
                        break;

                    case 'txt':
                    case 'log':
                    case 'md':
                    case 'json':
                    case 'csv':
                        // Text file preview
                        fetch(signedUrl)
                            .then(response => response.text())
                            .then(text => {
                                const textPreview = document.createElement('pre');
                                textPreview.textContent = text;
                                textPreview.classList.add('preview-text');
                                previewContainer.appendChild(textPreview);
                            });
                        break;

                    case 'pdf':
                        // PDF preview using iframe
                        const pdfFrame = document.createElement('iframe');
                        pdfFrame.src = signedUrl;
                        pdfFrame.width = '100%';
                        pdfFrame.height = '500px';
                        previewContainer.appendChild(pdfFrame);
                        break;

                    default:
                        // Fallback for unsupported file types
                        const unsupportedMsg = document.createElement('div');
                        unsupportedMsg.textContent = `Preview not supported for ${fileName}. File type: ${fileExtension}`;
                        previewContainer.appendChild(unsupportedMsg);
                }

                // Show modal
                filePreviewModal.style.display = 'flex';

            } catch (error) {
                setStatus('Preview failed: ' + error.message, 'error');
                console.error('Preview error:', error);
            }
        }

        // Close preview modal
        document.getElementById('closePreview').addEventListener('click', () => {
            document.getElementById('filePreviewModal').style.display = 'none';
        });

        // Modify displayResults function to include preview button
        function displayResults(data) {
            if (!data || data.length === 0) {
                setStatus('No records found', 'info');
                resultsTable.style.display = 'none';
                return;
            }
            
            // Clear existing results
            resultsBody.innerHTML = '';
            
            // Add new results
            data.forEach(record => {
                const row = document.createElement('tr');
                
                // Format date
                const createdAt = new Date(record.created_at);
                const formattedDate = createdAt.toLocaleString();
                
                row.innerHTML = `
                    <td>${record.document_name}</td>
                    <td>${record.file_path}</td>
                    <td>${formattedDate}</td>
                    <td>
                        <button onclick="downloadFile('${record.file_path}')">Download</button>
                        <button onclick="previewFile('${record.file_path}', '${record.document_name}')">Preview</button>
                    </td>
                `;
                
                resultsBody.appendChild(row);
            });
            
            resultsTable.style.display = 'table';
            setStatus(`Found ${data.length} record(s)`, 'success');
        }
    </script>
</body>
</html>
